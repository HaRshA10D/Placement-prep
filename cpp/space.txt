#include<iostream>
#include<vector>
#include<math.h>
using namespace std;
vector<long long int> factorsOf(long long int x){
  vector<long long int> facs;
  long long int totFacs = 1,l=0,te=x;
  while(x%2==0){
    facs.push_back(2);
    x = x/2;
    l++;
  }
  totFacs *= (l+1);
  l=0;
  for(long long int i=3;i<=sqrt(x);i=i+2){
    while(x%i==0){
      facs.push_back(i);
      x = x/i;
      l++;
    }
    totFacs *= (l+1);
    l=0;
  }
  if(x>2){
    facs.push_back(x);
    totFacs *= 2;
    facs.push_back(te);
  }
  facs.push_back(totFacs);
  return facs;
}
long long int commonFacs(vector<long long int> x,vector<long long int> y){
  long long int commons = 1,s1=0,s2=0,l=0;
  while(s1<x.size() && s2<y.size()){
    if(x[s1]==y[s2]){
      l++;
      s1++;
      s2++;
    }else{
      commons *= (l+1);
      l=0;
      if(x[s1]>y[s2]) s2++;
      else s1++;
    }
  }
  return commons;
}
int main(){
  long long int a[] = {1,2,6,7,11};
  long long int n = sizeof(a)/sizeof(long long int);
  long long int factors[n] = {};
  vector<vector<long long int> > main;
  for(long long int i=0;i<n;i++){
    vector<long long int> temp = factorsOf(a[i]);
    factors[i] = temp.back();
    temp.pop_back();
    main.push_back(temp);
  }
  long long int max = 0,now;
  for(long long int i=0;i<n-1;i++){
    for(long long int j=i+1;j<n;j++){
      now = factors[i] + factors[j] - commonFacs(main[i],main[j]);
      if(a[i]!=1 && a[j]!=1) now += 1;
      cout << "Numbers: " << a[i] << " " << a[j] << endl;
      cout << "factors: " << factors[i] << " " << factors[j] << endl;
      cout << "product: " << a[i]*a[j] << " factors: " << now << endl;
      if(now>max) max = now;
    }
  }
  cout << max << endl;
  return 0;
}
